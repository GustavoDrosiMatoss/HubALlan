-- Allan Hub Arise + Auto Castelo + Sistema de Configuração
-- 🔥 Agora com salvamento automático de todas as opções em allan_hub_config.json

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local remote = ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent")
local HttpService = game:GetService("HttpService")

-- 📁 Sistema de Configuração Global
local configFile = "allan_hub_config.json"
local config = {}

if isfile(configFile) then
    config = HttpService:JSONDecode(readfile(configFile))
else
    config = {
        AutoDungeon = false,
        AutoCastelo = false,
        AutoLeave = false,
        AndarEntrada = 10,
        AndarSaida = 1
    }
end

local function salvarConfig()
    writefile(configFile, HttpService:JSONEncode(config))
end

-- Variáveis Auto Castelo (usam valores da config)
local ativarCastelo = config.AutoCastelo
local ativarAutoLeave = config.AutoLeave
local andarEntrada = config.AndarEntrada
local andarSaida = config.AndarSaida
local currentFloor = 0

-- Aba Auto Castelo
local t = Window:AddTab({
    Title = "Auto Castelo",
    Icon = "home"
})

-- Andares Entrada / Saída
local andaresEntrada, andaresSaida = {}, {}
for i = 10, 110, 10 do table.insert(andaresEntrada, tostring(i)) end
for i = 1, 117 do table.insert(andaresSaida, tostring(i)) end

-- Dropdown Entrada
t:AddDropdown("AndarEntrada", {
    Title = "Selecionar Andar de Entrada",
    Values = andaresEntrada,
    Multi = false,
    Default = tostring(config.AndarEntrada),
    Callback = function(value)
        config.AndarEntrada = tonumber(value)
        salvarConfig()
        andarEntrada = config.AndarEntrada
        print("⚔️ Andar de entrada: " .. andarEntrada)
    end
})

-- Dropdown Saída
t:AddDropdown("AndarSaida", {
    Title = "Selecionar Andar de Saída (para Auto Leave)",
    Values = andaresSaida,
    Multi = false,
    Default = tostring(config.AndarSaida),
    Callback = function(value)
        config.AndarSaida = tonumber(value)
        salvarConfig()
        andarSaida = config.AndarSaida
        print("🚪 Andar de saída configurado: " .. andarSaida)
    end
})

-- Toggle Auto Leave
t:AddToggle("ToggleAutoLeave", {
    Title = "Ativar Auto Leave",
    Description = "Se ativo, vai sair no andar selecionado",
    Default = config.AutoLeave,
    Callback = function(state)
        config.AutoLeave = state
        salvarConfig()
        ativarAutoLeave = state
        print(ativarAutoLeave and "🚪 Auto Leave ativado" or "🚪 Auto Leave desativado")
    end
})

-- Função entrar Castelo
local function entrarCastelo()
    local args = {
        [1] = {
            [1] = {
                ["Check"] = true,
                ["Floor"] = tostring(andarEntrada),
                ["Event"] = "CastleAction",
                ["Action"] = "Join"
            },
            [2] = "\12"
        }
    }
    remote:FireServer(unpack(args))
    print("✅ Entrando no andar " .. andarEntrada)
end

-- Função sair Castelo
local function sairCastelo()
    local args = {
        [1] = {
            [1] = {
                ["Check"] = true,
                ["Floor"] = tostring(andarSaida),
                ["Event"] = "CastleAction",
                ["Action"] = "LeaveDungeon"
            },
            [2] = "\12"
        }
    }
    remote:FireServer(unpack(args))
    print("❌ Saindo no andar " .. andarSaida)
end

-- Função farmar mobs
local function atacarMobsCastelo()
    while ativarCastelo do
        local target = getNearestEnemy()
        if target and target.Parent then
            anticheat()
            moveToTarget(target)
            task.wait(0.3)
            fireShowPetsRemote()
            remote:FireServer({
                {
                    ["PetPos"] = {},
                    ["AttackType"] = "All",
                    ["Event"] = "Attack",
                    ["Enemy"] = target.Name
                },
                "\7"
            })
            while ativarCastelo and target.Parent and not isEnemyDead(target) do
                task.wait(0.1)
            end
            killedNPCs[target.Name] = true
        else
            task.wait(0.2)
        end
    end
end

-- Monitorar andar atual
local function monitorarAndar()
    ReplicatedStorage:WaitForChild("BridgeNet2"):WaitForChild("dataRemoteEvent").OnClientEvent:Connect(function(data)
        if typeof(data) == "table" and data[1] and data[1]["Event"] == "PortalAction" then
            local andar = tonumber(data[1]["Floor"])
            if andar then
                currentFloor = andar
                print("📍 Andar atual: " .. currentFloor)
                if ativarCastelo and ativarAutoLeave and currentFloor >= andarSaida then
                    sairCastelo()
                end
            end
        end
    end)
end
monitorarAndar()

-- Toggle Auto Castelo
t:AddToggle("ToggleAutoCastelo", {
    Title = "Auto Castelo",
    Description = "Ativa Auto Castelo com farm de mobs",
    Default = config.AutoCastelo,
    Callback = function(state)
        config.AutoCastelo = state
        salvarConfig()
        ativarCastelo = state
        if ativarCastelo then
            print("🔥 Auto Castelo ativado!")
            entrarCastelo()
            task.spawn(atacarMobsCastelo)
        else
            print("🛑 Auto Castelo desativado!")
        end
    end
})
